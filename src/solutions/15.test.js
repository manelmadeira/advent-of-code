import path from "node:path";
import { expect, it, describe } from "vitest";
import { readInput } from "./utils/readInput";
import { moveUpDown, solutionPartOne, solutionPartTwo, sum } from "./15";

describe("Day 15", () => {
  function prepareData(filePath) {
    const dataArray = readInput(filePath);
    const map = [];
    const commands = [];

    dataArray.forEach((row) => {
      if (row[0] === "#") {
        map.push(row.split(""));
      } else {
        commands.push(row);
      }
    });

    return [map, commands.join("")];
  }

  describe("Part One", () => {
    it("should return the correct value for the example", () => {
      const [map, commands] = prepareData(
        path.join(__dirname, "../inputs/15-example.txt")
      );

      expect(solutionPartOne(map, commands)).toEqual(2028);
    });

    it("should return the correct value for the second example", () => {
      const [map, commands] = prepareData(
        path.join(__dirname, "../inputs/15-example-2.txt")
      );

      expect(solutionPartOne(map, commands)).toEqual(10092);
    });

    it("should return the correct value for the first part", () => {
      const [map, commands] = prepareData(
        path.join(__dirname, "../inputs/15.txt")
      );

      expect(solutionPartOne(map, commands)).toEqual(1318523);
    });
  });

  describe("Part Two", () => {
    it("should return the correct value for the example", () => {
      const [map, commands] = prepareData(
        path.join(__dirname, "../inputs/15-example.txt")
      );

      expect(solutionPartTwo(map, commands)).not.toBeNull();
    });

    it("should return the correct value for the second example", () => {
      const [map, commands] = prepareData(
        path.join(__dirname, "../inputs/15-example-2.txt")
      );

      expect(solutionPartTwo(map, commands)).toEqual(9021);
    });

    it("should return the correct value for the second part", () => {
      const [map, commands] = prepareData(
        path.join(__dirname, "../inputs/15.txt")
      );

      expect(solutionPartTwo(map, commands)).toEqual(1337648);
    });
  });

  describe("moveUpDown", () => {
    it("test", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "#", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", ".", ".", "#", "#"],
          ["#", "#", "@", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[5, 2]],
        true
      );

      expect(result).toEqual(false);
    });

    it("test special", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", "@", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", "#", "[", "]", ".", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[5, 2]],
        true
      );

      expect(result).toMatchInlineSnapshot(`
        [
          [
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            ".",
            ".",
            ".",
            ".",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            ".",
            "@",
            ".",
            ".",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            "[",
            "[",
            "]",
            ".",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            ".",
            "]",
            "[",
            "]",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            "#",
            "[",
            "]",
            ".",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            ".",
            ".",
            ".",
            ".",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            ".",
            ".",
            ".",
            ".",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
          ],
          [
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
            "#",
          ],
        ]
      `);
    });

    it("test 2", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", ".", ".", "#", "#"],
          ["#", "#", "#", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 4]],
        false
      );

      expect(result).toEqual(false);
    });

    it("test 3", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "#", ".", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 4]],
        false
      );

      expect(result).toEqual(false);
    });

    it("test 4", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", ".", ".", "#", "#"],
          ["#", "#", ".", "#", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 4]],
        false
      );

      expect(result).toEqual(false);
    });

    it("test 4", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 4]],
        false
      );

      expect(result).toEqual(false);
    });

    it("test 5", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", ".", ".", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 4]],
        false
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ########
        ##....##
        ##..@.##
        ##.[].##
        ##[]..##
        ########
        ########"
      `);
    });
    it("test 5", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 4]],
        false
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ########
        ##....##
        ##..@.##
        ##.[].##
        ##[][]##
        ########
        ########"
      `);
    });
    it("test 6", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", "@", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[1, 3]],
        false
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ##....##
        ##.@..##
        ##.[].##
        ##[][]##
        ########"
      `);
    });
    it("test 7", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", "@", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[4, 2]],
        true
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ##.[].##
        ##[]..##
        ##@.[]##
        ##....##
        ########"
      `);
    });

    it("test 8", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", ".", "@", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[4, 3]],
        true
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ##.[].##
        ##[]..##
        ##.@[]##
        ##....##
        ########"
      `);
    });

    it("test 9", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", ".", ".", "@", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[4, 4]],
        true
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ##.[].##
        ##..[]##
        ##[]@.##
        ##....##
        ########"
      `);
    });

    it("test 10", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", ".", ".", ".", "@", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[4, 5]],
        true
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ##.[].##
        ##..[]##
        ##[].@##
        ##....##
        ########"
      `);
    });

    it("test 11", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", "[", "]", ".", "#", "#"],
          ["#", "#", ".", ".", "[", "]", "#", "#"],
          ["#", "#", "[", "]", ".", "@", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[3, 5]],
        true
      );

      expect(result).toEqual(false);
    });

    it("test 12", () => {
      const result = moveUpDown(
        [
          ["#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", ".", "[", "]", "@", "#", "#"],
          ["#", "#", "[", "]", "[", "]", "#", "#"],
          ["#", "#", ".", ".", ".", ".", "#", "#"],
          ["#", "#", "#", "#", "#", "#", "#", "#"],
        ],
        [[2, 5]],
        false
      );

      expect(result.map((row) => row.join("")).join("\n"))
        .toMatchInlineSnapshot(`
        "########
        ##....##
        ##.[].##
        ##[].@##
        ##..[]##
        ########"
      `);
    });
  });

  describe("sum", () => {
    it("should return 105", () => {
      expect(
        sum([
          ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
          ["#", "#", ".", ".", ".", "[", "]", ".", ".", "."],
          ["#", "#", ".", ".", ".", ".", ".", ".", ".", "."],
        ])
      ).toEqual(105);
    });
  });
});
